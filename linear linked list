#include<bits/stdc++.h>
using namespace std;
//linear linked list
struct node
{
    int data;
    struct node *next;
}*first =NULL,*second =NULL,*third=NULL;
void create(int A[],int n)
{
    int i;
    struct node *t,*last;
    first = new node;
    first ->data =A[0];
    first ->next = NULL;
    last = first;

    for ( i = 1; i < n; i++)
    {
        t =new node;
        t->data =A[i];
        t->next= NULL;
        last->next=t;
        last = t;
    }
    
}
void create2(int B[],int n)
{
    int i;
    struct node *t,*last;
    second = new node;
    second ->data =B[0];
    second ->next = NULL;
    last = second;

    for ( i = 1; i < n; i++)
    {
        t =new node;
        t->data =B[i];
        t->next= NULL;
        last->next=t;
        last = t;
    }
    
} 
void display(struct node *p)
{   
    //normal display
    cout<<"this is our list "<<endl;
    while (p!=NULL)
    {
        cout<<p->data<<" ";
        p = p ->next;
    }
    //display using recursion
    // if(p!=0)
    // {   
    //     cout<<p->data<<endl;
    //     display(p->next);
    // }
    //display in reverse

    // if(p!=0)
    // {    display(p->next);
    //     cout<<p->data<<" ";
    // }  
        
}
int count (struct node *p)
{
    int c = 0;
    while (p!=NULL)
    {
        c++;
        p=p->next;
    }
    return c;
    /* using recursion
    if(p->next==0)
        return 0;
    else
        return count(p->next) + 1;
    */
}
int sum(struct node *p)
{
    int sum = 0;
    while (p!=NULL)
    {
        sum = sum + p->data;
        p=p->next;
    }
    return sum;
    /*  using recursion
    if(p->next==0)
        return 0;
    else
        return sum(p->next) + p->data;
    */
}
int max_1(struct node *p )
{
    int maxi = INT32_MIN;
    // while (p!=NULL)
    // {
    //     if(p->data>maxi)
    //     {
    //         maxi = p->data;
            
    //     }
    //     p=p->next; 
    // }
    // return maxi;

    //max function using recursion
    if(p==0)
        return maxi;
    else
        maxi=max_1(p->next);
        if(p->data>maxi)
            return p->data;
        else
            return maxi;

}
node *search(node *p,int key)
{
    //without recursion
    // while (p!=NULL)
    // {
    //     if(key==p->data)
    //         return p;
    //     p=p->next;
    // }
    // return NULL;
    
    // with recursion
    if(p==NULL)
        return NULL;
    if(key==p->data)
        return p;
    else
        search(p->next,key); 
    
}
node *Lsearch(node *p,int key)
{//improved search function
    node *q = NULL;
    while (p!=NULL)
    {
        if(key==p->data)
        {
            q->next=p->next;
            p->next=first;
            first=p;
            return p;   
        }
        q=p;
        p=p->next;
    }
    return NULL;
}
void insert(node *p,int pos,int x)
{
    if(pos<0||pos>count(first))
        cout<<"INvalid input";
    node *t;
    if(pos==0)
    {
        t = new node;
        t->data=x;
        t->next=first;
        first=t;
    }
    else if(pos>0)
    {
        p=first;
        for(int i = 0;i<pos - 1 && p;i++)
        {
            p=p->next;
        }
        if(p)
        {
            t = new node;
            t -> data = x; 
            t->next=p->next;
            p->next = t;

        }
    }
}
void insertl(int x)//insert from last
{
    node *t = new node;
    node *last;
    t->data = x;
    t->next = NULL;
    if(first == NULL)
    {
        first  = last = t;
    }
    else 
    {
        last ->next = t;
        last = t;
    }
}
void insertl2(struct node *p,int x)//insert in a sorted manner
{
    struct node *t = new node;
    struct node*q;
    p=first;
    t->data = x;
    t->next = NULL;
    if(first == NULL)
    {
        first =t;
    }
    else
    {
        while (p && p->data <x)
        {
            q=p;
            p = p->next;
        }
        if(p==first)
        {
            t->next=first;
            first = t;
        }
        else{
            
            t->next=q->next;
            q->next=t;
        }
    }
}
int Delete(struct node *p,int pos)
{
    int x=-1;
    node * q  =NULL;

    if(pos<1 || pos>count(first))
    {
        cout<<"Invalid index";
        exit(1);
    }    
    else if(pos  == 1)
    {
        q= first;
        x=first->data;
        first = first ->next;
        delete q; 
    }
    else
    {
        for(int i = 0;i<pos - 1;i++)
        {
            q=p;//q is a tailing pointer
            p=p->next;
        }
        q->next=p->next;
        x=p->data;
        delete p;
        return x;
    }
}
int isSorted(struct node *p)
{
    int x  = -66576;
    while(p)
    {
        if(p->data<x)
        {
            return 0;
        }
        x=p->data;
        p=p->next;
    }
    return 1;
}
void reverse(struct node *p)
{
    int *B= new int[count(first)];
    p=first;
    int i=0;
    while (p)
    {
        B[i]=p->data;
        p=p->next;
        i++;
    }
    p =first;i--;
    while (p)
    {
        p->data=B[i--];
        p=p->next;
    }
    delete []B;
}
void reverse_sliding_pointers(struct node *p)
{//use of sliding pointers
    struct node *q ,*r;
    p=first;
    q=NULL;
    r=NULL;
    while(p!=NULL)
    {
        r=q;
        q=p;
        p=p->next;
        q->next = r;
    }
    first = q;
}
void reverse_using_recursion(node *q,node  *p)
{
    if(p)
    {
        reverse_using_recursion(p,p->next);
        p->next =q;
    }
    else
        first = q;
}
void DeleteDuplicates(struct node *p)
{
    struct node *q = first ->next;
    p=first;
    while (q!=NULL)
    {
        if(p->data!=q->data)
        {
            p=q;
            q=q->next;
        }
        else
        {
            p->next = q->next;
            delete q;
            q=p->next;//shifting q to next node
        }
    }
    
}
void concat(struct node *p,struct node *q)
{
    p = first;
    q = second;
    while (p->next!=NULL)
    {
        p=p->next;
    }
    p->next = second;
}
void merge(struct node *p,struct node *q)//p-first,q-second
{
    struct node *last;
    if(p->data<q->data)
    {
        last = third = p;
        p = p ->next;
        third ->next =NULL;
    }
    else
    {
        last = third = q;
        q = q ->next;
        third ->next =NULL;   
    }
    while (p && q)
    {
        if(p->data<q->data)
        {
            last ->next =p;
            last = p;
            p=p->next;
            last->next=NULL;
        }
        else
        {
            last ->next =q;
            last = q;
            q=q->next;
            last->next=NULL;
        }
    }
    if(q)last->next = q;
    if(p)last->next = p;
}
int IsLoop(struct node *first)
{
    node*p , *q;
    p=q=first;
    do
    {
        p=p->next;
        q=q->next;
        q=q!=NULL?q->next:q;
    } while (p&&q && p!=q);
    
    return p==q?1:0;
    
}

int main()
{
    node *tmp = NULL;
    node *t1 , *t2;
    int A[] = {22,26,27,28,29};
    // int B[]={20,21,23,25,24};
    // create2(B,5);
    // create(A,5);
    // t1 = first ->next->next;
    // t2 = first ->next->next->next->next;
    // // t2->next = t1;
    IsLoop(first);
    if(IsLoop)
        cout<<"there is a loop in linked list "<<endl;
    else
        cout<<"there is NO loop in linked list "<<endl;

    // merge(first,second);
    // insert(first,2,5);
    
    // insertl2(first,23);
    // cout<<"deleted element is "<<Delete(first,5)<<endl;
    // if(isSorted(first))
    // {
    //     cout<<" Is Sorted "<<endl;
    // }
    // else{
    //     cout<<" Not Sorted "<<endl;
    // }
    // display(first);
    // reverse_sliding_pointers(first);
    // reverse_using_recursion(NULL,first);
    // DeleteDuplicates(first);
    // concat(first,second);
    // display(third);
    
    // cout<<endl;
    // cout<<max_1(first)<<" is maximum "<<endl;
    // cout<<sum(first)<<" is sum of all elements "<<endl;
    // cout<<count(first)<<" is the total no of elements "<<endl;
    // // tmp = Lsearch(first,18);
    
    // // if(tmp!=NULL)
    // //     cout<<"Key is found "<<endl;
    // // else
    // //     cout<<"Key is not found"<<endl;
    return 0 ;
}
