#include<bits/stdc++.h>
using namespace std;
//Circular Linked List
struct node
{
    int data;
    struct node *next;
}*Head=NULL;
void create(int A[] , int n)
{
    node *t,*last;
    t = new node;
    Head = t;
    Head ->data = A[0];
    Head->next = Head;
    last = Head;

    for (int i = 1; i < n; i++)
    {
        t = new node;
        t->data = A[i];
        t->next = Head;
        last ->next=t;
        last =  t; 
    }
    
}
void Display(struct node *h)
{
    h = Head;
    do
    {
        cout<<h->data<<" ";
        h=h->next;
    } while (h!=Head);
    
}
void Rdisplay(struct node *h)
{
    static int flag = 0;
    if(h!=Head || flag == 0)
    {   
        flag = 1;
        cout<<h->data<<" ";
        Rdisplay(h->next);
    }
    flag = 0;
}
int Length(struct node *p)//count
{
    int len = 0;
    do
    {
        len++;
        p = p->next;
    } while (p!=Head);
    return len;
}
void Insert(struct node *p, int index , int x)
{
    struct node *t;
    int i;
    if(index<0 || index>Length(Head))//Invalid Index
        return ;
    if(index == 0)//Insert before head or after last
    {
        t = new node;
        t ->data = x;
        if(Head==NULL)
        {
            Head = t;
            Head ->next = Head;
        }
        else
        {
            while (p->next!=Head)
            {
                p = p->next;
            }
            p ->next = t;
            t->next  = Head;
            Head = t;
            
        }
    }
    else//Inserting in middle any where
    {
        for ( i = 0; i < index - 1; i++)
            p=p->next;
        t= new node;
        t->data = x;
        t->next = p->next;
        p->next = t;
    }
}
int Delete( struct node *p,int index)
{
    node *q;
    int x;
    if(index<0 || index >Length(Head))
    {
        cout<<"Ivalid Index "<<endl;
        return -1;
    }   
    if(index ==1)
    {
        p=Head;
        while (p->next!=Head)
        {
            p=p->next;
        }
        x = p->data;
        if(p==Head)
        {
            delete Head;
            Head=NULL;
        }
        else
        {
            p->next = Head ->next;
            delete Head;
            Head = Head->next;
        }
    }
    else
    {
        p = Head;
        for (int i = 0; i < index -2; i++)
        {
            p=p->next;
        }
        q = p->next;
        x = q->data;
        p->next = q->next;
        delete q;
        }
    return x;
        
}
int sum(struct node *p)
{
    int sum = 0;
    while (p!=NULL)
    {
        sum = sum + p->data;
        p=p->next;
    }
    return sum;
    /*  using recursion
    if(p->next==0)
        return 0;
    else
        return sum(p->next) + p->data;
    */
}
int max_1(struct node *p )
{
    int maxi = INT32_MIN;
    struct node *q=Head;
    do
    {
        if(q->data>maxi)
        {
            maxi = p->data;
            
        }
        q=q->next; 
    }while (q!=Head);
    return maxi;

    //max function using recursion
    // if(q==Head)
    //     return maxi;
    // else
    //     maxi=max_1(p->next);
    //     if(p->data>maxi)
    //         return p->data;
    //     else
    //         return maxi;

}
node *search(node *p,int key)
{
    //without recursion
    // while (p!=NULL)
    // {
    //     if(key==p->data)
    //         return p;
    //     p=p->next;
    // }
    // return NULL;
    
    // with recursion
    if(p==NULL)
        return NULL;
    if(key==p->data)
        return p;
    else
        search(p->next,key); 
    
}
// node *Lsearch(node *p,int key)
// {//improved search function
//     node *q = NULL;
//     while (p!=NULL)
//     {
//         if(key==p->data)
//         {
//             q->next=p->next;
//             p->next=first;
//             first=p;
//             return p;   
//         }
//         q=p;
//         p=p->next;
//     }
//     return NULL;
// }
int main()
{   
    int A[] = {1,2,3,4,5};
    create(A,5);
    
    
    // Insert(Head,5,10);
    // Display(Head);
    // Delete(Head,5);
    // cout<<endl;
    // Rdisplay(Head);
    cout<<"the maximum is "<<max_1(Head)<<endl;
    return 0 ;
}
